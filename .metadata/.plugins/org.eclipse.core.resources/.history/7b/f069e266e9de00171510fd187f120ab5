
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Iterator;

import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;






public class CompressMain {

	public static Boolean copyFile(String afileL, String bfileL)
			throws IOException {
		Boolean suceess = true;
		try {
			InputStream inStream = null;
			OutputStream outStream = null;
			File afile = new File(afileL);
			File bfile = new File(bfileL);
			inStream = new FileInputStream(afile);
			outStream = new FileOutputStream(bfile);
			byte buffer = new byte();
			int length;
			// copy the file content in bytes
			while ((buffer = inStream.read()) > 0) {
				outStream.write(buffer, 0, length);
			}
			inStream.close();
			outStream.close();
			System.out.println("File is copied successful!");
			return suceess;
		} catch (Exception exception) {
			return false;
		}
	}

	public static void main(String a[]) throws IOException {
		try {
			String fileName_mainDir = "F:/assets";
			String compressLocation = "F:/assetsCopy";
			File compresL0c = new File(compressLocation);
			compresL0c.mkdir();
			File file_mainDir = new File(fileName_mainDir);
			String[] dirNames = file_mainDir.list();
			int p = dirNames.length;
			for (int i = 0; i < p; i++) {

				File subFolderObj = new File(fileName_mainDir + "/"
						+ dirNames[i]);
				File[] subFiles = subFolderObj.listFiles();
				long filesTotal = subFiles.length;
				if (filesTotal > 0) {
					try {
						for (int y = 0; y < filesTotal; y++) {
							System.out.println("ENTERING FOLEDEr::"+ dirNames[i] + "::FILLE::" + subFiles[y]);
							File input = new File(subFiles[y].toString());
							BufferedImage image = ImageIO.read(input);

							File makeDir = new File(compressLocation + "/"
									+ dirNames[i]);
							if (!makeDir.exists()) {
								if (makeDir.mkdir()) {
									System.out.println("FOLDER created.."
											+ makeDir.toString());
								} else {
									System.out
											.println("FOLDER creation fails.."
													+ makeDir.toString());
								}
							}
							File compressedImageFile = new File(makeDir + "/"+ subFiles[y].getName());
							if (compressedImageFile.toString().contains(".jpg")|| compressedImageFile.toString().contains(".JPG")|| compressedImageFile.toString().contains(".jpeg")||compressedImageFile.toString().contains(".PNG")
									||compressedImageFile.toString().contains(".png")||compressedImageFile.toString().contains(".gif")||compressedImageFile.toString().contains(".GIF")) {
								OutputStream os = new FileOutputStream(compressedImageFile);
								Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName("jpg");
								ImageWriter writer = (ImageWriter) writers.next();
								ImageOutputStream ios = ImageIO.createImageOutputStream(os);
								writer.setOutput(ios);
								ImageWriteParam param = writer.getDefaultWriteParam();
								param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
								param.setCompressionQuality(0.4f);
								writer.write(null, new IIOImage(image, null,
										null), param);
								os.close();
								ios.close();
								writer.dispose();
							}
							if (compressedImageFile.toString().contains(".TIF")) {
								copyFile(input.toString(), compressedImageFile.toString());

							}
							if (compressedImageFile.toString().contains(".pdf")) {
								copyFile(input.toString(), compressedImageFile.toString());
								
							}
							if (compressedImageFile.toString().contains(".PDF")) {
								copyFile(input.toString(), compressedImageFile.toString());
							}

						}
					}

					catch (Exception e) {
						System.out.println("EXE" + e.getMessage());
						e.getStackTrace();
					} finally {

					}
				}
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.getStackTrace();
		}
	}
}
