package com.test.pol;

import java.util.ArrayList;

public class Numbertoword {

	int gettheDevisor(int number) {
		int numberOfZeros = 0;
		boolean pass = true;
		while (pass) {
			number = number / 10;
			numberOfZeros = numberOfZeros + 1;
			if (number < 10) {
				pass = false;
			}
		}
		return numberOfZeros;
	}

	int getThedevisorNumber(int number) {
		return this.gettheDevisor(number) - 1;
	}
//position, number
	String getWords(int positionIndex,int number){
		String word="";
		if(positionIndex!=1){
		switch(number){
		case 1:
		word= "ONE ";
		break;	
		case 2:
		word= "TWO ";
		break;	
		case 3:
		word= "THREE ";
		break;	
		case 4:
		word= "FOUR ";
		break;	
		case 5:
		word= "FIVE ";
		break;	
		case 6:
		word= "SIX ";
		break;	
		case 7:
		word= "SEVEN ";
		break;
		case 8:
		word= "EIGHT ";
		break;
		case 9:
		word= "NINE ";
		break;
		}
		
		switch(positionIndex){
		case 3:
			word=word+"THOUSHAND ";
			break;
		case 2:
			word=word+"HUNDRED ";
			break;
		}
		}
		return word;
	}
	
	
	
	public static void main(String a[]) {
		ArrayList<Integer> intArray = new ArrayList<Integer>();
		int number = 131;
		int actualNumber = number;
		Numbertoword findTotalDigit = new Numbertoword();
		boolean pass = true;
		while (pass) {
			intArray.add((int) ((int) (number) % Math.pow(10,findTotalDigit.gettheDevisor(number))));// deviser
			// next digit
			int nextDigit = findTotalDigit.getThedevisorNumber(number);
			number = (int) (number / (Math.pow(10, nextDigit)));
			if (nextDigit == 0) {
				intArray.add((int) ((int) (number) / Math.pow(10,findTotalDigit.gettheDevisor(number))));
				pass = false;
			}

		}

		int maxSize=intArray.size();
		String wordString="";
		for(int i=maxSize-1;i>=0;i--){
			wordString=wordString+findTotalDigit.getWords(i,intArray.get(i));
			if(i==1){
				wordString=wordString+findTotalDigit.getWordForOnthAndTesnth(intArray.get(i)*10 +intArray.get(i-1));
			}
		}
System.out.println(wordString);
	}

	private String getWordForOnthAndTesnth(int twoDigits) {
		String word="";
		if(twoDigits>19){
			int once=twoDigits%10;
			int tens=twoDigits/10;
			switch(tens){
			case 2:
			word= "TWENTY ";
			break;	
			case 3:
			word= "THIRTY ";
			break;	
			case 4:
			word= "FOURTY ";
			break;	
			case 5:
			word= "FIVETY ";
			break;	
			case 6:
			word= "SIXTY ";
			break;	
			case 7:
			word= "SEVENTY ";
			break;
			case 8:
			word= "EIGHTTY ";
			break;
			case 9:
			word= "NINETY ";
			break;
			}
			
			switch(once){
			case 1:
			word= word+"ONE ";
			break;	
			case 2:
			word= word+"TWO ";
			break;	
			case 3:
			word=word+ "THREE ";
			break;	
			case 4:
			word= word+"FOUR ";
			break;	
			case 5:
			word= word+"FIVE ";
			break;	
			case 6:
			word= word+"SIX ";
			break;	
			case 7:
			word= word+"SEVEN ";
			break;
			case 8:
			word= word+"EIGHT ";
			break;
			case 9:
			word= word+"NINE ";
			break;
			case 10:
				word= word+"TEN ";
				break;
		}}  else{
			switch(twoDigits){
			case 11:
			word= "ELEVEN";
			break;	
			case 12:
			word= "TWELVE ";
			break;	
			case 13:
			word= "THIRTEEEN ";
			break;	
			case 14:
			word= "FOURTEEN ";
			break;	
			case 15:
			word= "FIFTEEN";
			break;	
			case 16:
			word= "SIXTEEEN ";
			break;
			case 17:
			word= "SEVENTEEN ";
			break;
			case 18:
			word= "EIGHTEEN ";
			break;
			case 19:
			word= "NINETEEN ";
			break;
			case 10:
			word= word+"TEN ";
			break;
			}
			}
		return word;
	}

}
